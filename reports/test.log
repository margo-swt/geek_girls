2025-04-03 00:19:01,768 - INFO - Starting empty fields validation test
2025-04-03 00:19:03,470 - INFO - Empty fields validation test completed successfully
2025-04-03 00:19:03,604 - INFO - Starting empty fields API validation test
2025-04-03 00:19:04,223 - INFO - Response status code: 400
2025-04-03 00:19:04,223 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:19:04,223 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:20:52,908 - INFO - Starting empty fields validation test
2025-04-03 00:20:54,689 - INFO - Empty fields validation test completed successfully
2025-04-03 00:20:54,818 - INFO - Starting empty fields API validation test
2025-04-03 00:20:55,451 - INFO - Response status code: 400
2025-04-03 00:20:55,451 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:20:55,451 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:31:35,584 - INFO - Test setup completed
2025-04-03 00:31:35,592 - INFO - Starting SQL-based user registration test
2025-04-03 00:31:35,592 - INFO - Retrieved test user data: Anthony Reeves (rogersjohn@example.org)
2025-04-03 00:31:36,563 - INFO - Navigated to Add User page
2025-04-03 00:31:36,852 - INFO - Filled in user registration form with SQL data
2025-04-03 00:31:36,892 - INFO - Submitted user registration form
2025-04-03 00:31:47,516 - INFO - Test cleanup completed
2025-04-03 00:33:29,169 - INFO - Test setup completed
2025-04-03 00:33:29,180 - INFO - Starting SQL-based user registration test
2025-04-03 00:33:29,180 - INFO - Retrieved test user data: Jane Mccoy (allenkimberly@example.com)
2025-04-03 00:33:30,158 - INFO - Navigated to Add User page
2025-04-03 00:33:30,426 - INFO - Filled in user registration form with SQL data
2025-04-03 00:33:30,465 - INFO - Submitted user registration form
2025-04-03 00:33:53,609 - INFO - Test cleanup completed
2025-04-03 00:35:58,520 - INFO - Test setup completed
2025-04-03 00:35:58,528 - INFO - Verifying SQL table creation and data...
2025-04-03 00:35:58,528 - INFO - Table structure:
2025-04-03 00:35:58,528 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 00:35:58,528 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:35:58,528 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:35:58,528 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:35:58,528 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:35:58,528 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 00:35:58,528 - INFO - Number of rows in table: 5
2025-04-03 00:35:58,528 - INFO - Sample data:
2025-04-03 00:35:58,528 - INFO - ID: 1, Name: William Hall, Email: austin54@example.com, Created: 2025-04-02 20:35:58
2025-04-03 00:35:58,528 - INFO - ID: 2, Name: Catherine Mendoza, Email: garzapatricia@example.net, Created: 2025-04-02 20:35:58
2025-04-03 00:35:58,528 - INFO - ID: 3, Name: Nathan Duncan, Email: jeffreyturner@example.com, Created: 2025-04-02 20:35:58
2025-04-03 00:35:58,529 - INFO - Starting SQL-based user registration test
2025-04-03 00:35:58,529 - INFO - Retrieved test user data: William Hall (austin54@example.com)
2025-04-03 00:35:59,501 - INFO - Navigated to Add User page
2025-04-03 00:35:59,754 - INFO - Filled in user registration form with SQL data
2025-04-03 00:35:59,792 - INFO - Submitted user registration form
2025-04-03 00:36:33,455 - INFO - Database file cleaned up
2025-04-03 00:36:33,536 - INFO - Test cleanup completed
2025-04-03 00:37:38,193 - INFO - Starting empty fields validation test
2025-04-03 00:37:39,439 - INFO - Starting empty fields API validation test
2025-04-03 00:37:40,066 - INFO - Response status code: 400
2025-04-03 00:37:40,067 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:37:40,067 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:37:40,082 - INFO - Starting SQL operations test
2025-04-03 00:37:40,083 - INFO - Executing SELECT query
2025-04-03 00:37:40,083 - INFO - Found 3 users in the database
2025-04-03 00:37:40,083 - INFO - Executing SELECT with WHERE clause
2025-04-03 00:37:40,083 - INFO - Found user: (1, 'John', 'Doe', 'john.doe@example.com', '2025-04-02 20:37:40')
2025-04-03 00:37:40,083 - INFO - Executing INSERT operation
2025-04-03 00:37:40,084 - INFO - Executing UPDATE operation
2025-04-03 00:37:40,085 - INFO - Executing DELETE operation
2025-04-03 00:37:40,086 - INFO - Creating and querying related tables
2025-04-03 00:37:40,087 - INFO - Executing JOIN query
2025-04-03 00:37:40,088 - INFO - Found 3 user profiles
2025-04-03 00:37:40,088 - INFO - Executing aggregate functions
2025-04-03 00:37:40,088 - INFO - Total number of users: 3
2025-04-03 00:37:40,088 - INFO - Executing GROUP BY query
2025-04-03 00:37:40,088 - INFO - Location statistics: [('San Francisco', 1)]
2025-04-03 00:37:40,088 - INFO - Final user count: 3
2025-04-03 00:37:40,089 - INFO - SQL operations test completed successfully
2025-04-03 00:37:40,504 - INFO - Test setup completed
2025-04-03 00:37:40,510 - INFO - Verifying SQL table creation and data...
2025-04-03 00:37:40,510 - INFO - Table structure:
2025-04-03 00:37:40,510 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 00:37:40,510 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:37:40,510 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:37:40,510 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:37:40,510 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:37:40,511 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 00:37:40,511 - INFO - Number of rows in table: 5
2025-04-03 00:37:40,512 - INFO - Sample data:
2025-04-03 00:37:40,512 - INFO - ID: 1, Name: Joshua Norton, Email: sandovalchelsea@example.org, Created: 2025-04-02 20:37:40
2025-04-03 00:37:40,512 - INFO - ID: 2, Name: Gregory Long, Email: flynnstacey@example.org, Created: 2025-04-02 20:37:40
2025-04-03 00:37:40,512 - INFO - ID: 3, Name: Lisa Vega, Email: robert51@example.net, Created: 2025-04-02 20:37:40
2025-04-03 00:37:40,512 - INFO - Starting SQL-based user registration test
2025-04-03 00:37:40,513 - INFO - Retrieved test user data: Joshua Norton (sandovalchelsea@example.org)
2025-04-03 00:37:41,654 - INFO - Navigated to Add User page
2025-04-03 00:37:41,899 - INFO - Filled in user registration form with SQL data
2025-04-03 00:37:41,935 - INFO - Submitted user registration form
2025-04-03 00:38:15,607 - INFO - Database file cleaned up
2025-04-03 00:38:15,691 - INFO - Test cleanup completed
2025-04-03 00:39:26,372 - INFO - Starting empty fields validation test
2025-04-03 00:39:27,573 - INFO - Starting empty fields API validation test
2025-04-03 00:39:28,207 - INFO - Response status code: 400
2025-04-03 00:39:28,207 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:39:28,208 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:39:28,220 - INFO - Starting SQL operations test
2025-04-03 00:39:28,220 - INFO - Executing SELECT query
2025-04-03 00:39:28,220 - INFO - Found 3 users in the database
2025-04-03 00:39:28,221 - INFO - Executing SELECT with WHERE clause
2025-04-03 00:39:28,221 - INFO - Found user: (1, 'John', 'Doe', 'john.doe@example.com', '2025-04-02 20:39:28')
2025-04-03 00:39:28,221 - INFO - Executing INSERT operation
2025-04-03 00:39:28,222 - INFO - Executing UPDATE operation
2025-04-03 00:39:28,223 - INFO - Executing DELETE operation
2025-04-03 00:39:28,224 - INFO - Creating and querying related tables
2025-04-03 00:39:28,225 - INFO - Executing JOIN query
2025-04-03 00:39:28,226 - INFO - Found 3 user profiles
2025-04-03 00:39:28,226 - INFO - Executing aggregate functions
2025-04-03 00:39:28,226 - INFO - Total number of users: 3
2025-04-03 00:39:28,226 - INFO - Executing GROUP BY query
2025-04-03 00:39:28,226 - INFO - Location statistics: [('San Francisco', 1)]
2025-04-03 00:39:28,226 - INFO - Final user count: 3
2025-04-03 00:39:28,227 - INFO - SQL operations test completed successfully
2025-04-03 00:39:28,661 - INFO - Test setup completed
2025-04-03 00:39:28,669 - INFO - Verifying SQL table creation and data...
2025-04-03 00:39:28,669 - INFO - Table structure:
2025-04-03 00:39:28,670 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 00:39:28,670 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:39:28,670 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:39:28,670 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:39:28,670 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:39:28,670 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 00:39:28,670 - INFO - Number of rows in table: 5
2025-04-03 00:39:28,671 - INFO - Sample data:
2025-04-03 00:39:28,671 - INFO - ID: 1, Name: Nancy Robbins, Email: agonzalez@example.net, Created: 2025-04-02 20:39:28
2025-04-03 00:39:28,671 - INFO - ID: 2, Name: Laura Roberts, Email: christopher04@example.org, Created: 2025-04-02 20:39:28
2025-04-03 00:39:28,671 - INFO - ID: 3, Name: Rebecca Walsh, Email: monicabartlett@example.net, Created: 2025-04-02 20:39:28
2025-04-03 00:39:28,681 - INFO - Starting SQL-based user registration test
2025-04-03 00:39:28,681 - INFO - Retrieved test user data: Nancy Robbins (agonzalez@example.net)
2025-04-03 00:39:29,820 - INFO - Navigated to Add User page
2025-04-03 00:39:30,059 - INFO - Filled in user registration form with SQL data
2025-04-03 00:39:30,088 - INFO - Submitted user registration form
2025-04-03 00:40:03,690 - INFO - Database file cleaned up
2025-04-03 00:40:03,767 - INFO - Test cleanup completed
2025-04-03 00:42:35,130 - INFO - Starting empty fields validation test
2025-04-03 00:42:46,872 - INFO - Starting empty fields API validation test
2025-04-03 00:42:47,504 - INFO - Response status code: 400
2025-04-03 00:42:47,504 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:42:47,504 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:42:47,511 - INFO - Starting SQL operations test
2025-04-03 00:42:47,511 - INFO - Executing SELECT query
2025-04-03 00:42:47,511 - INFO - Found 3 users in the database
2025-04-03 00:42:47,511 - INFO - Executing SELECT with WHERE clause
2025-04-03 00:42:47,511 - INFO - Found user: (1, 'John', 'Doe', 'john.doe@example.com', '2025-04-02 20:42:47')
2025-04-03 00:42:47,511 - INFO - Executing INSERT operation
2025-04-03 00:42:47,512 - INFO - Executing UPDATE operation
2025-04-03 00:42:47,512 - INFO - Executing DELETE operation
2025-04-03 00:42:47,512 - INFO - Creating and querying related tables
2025-04-03 00:42:47,513 - INFO - Executing JOIN query
2025-04-03 00:42:47,513 - INFO - Found 3 user profiles
2025-04-03 00:42:47,513 - INFO - Executing aggregate functions
2025-04-03 00:42:47,513 - INFO - Total number of users: 3
2025-04-03 00:42:47,513 - INFO - Executing GROUP BY query
2025-04-03 00:42:47,513 - INFO - Location statistics: [('San Francisco', 1)]
2025-04-03 00:42:47,513 - INFO - Final user count: 3
2025-04-03 00:42:47,514 - INFO - SQL operations test completed successfully
2025-04-03 00:42:47,947 - INFO - Test setup completed
2025-04-03 00:42:47,955 - INFO - Verifying SQL table creation and data...
2025-04-03 00:42:47,955 - INFO - Table structure:
2025-04-03 00:42:47,955 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 00:42:47,956 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:42:47,956 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:42:47,956 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:42:47,956 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:42:47,956 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 00:42:47,956 - INFO - Number of rows in table: 5
2025-04-03 00:42:47,956 - INFO - Sample data:
2025-04-03 00:42:47,956 - INFO - ID: 1, Name: Kara Anderson, Email: sjackson@example.org, Created: 2025-04-02 20:42:47
2025-04-03 00:42:47,956 - INFO - ID: 2, Name: Scott Price, Email: jessicamcneil@example.net, Created: 2025-04-02 20:42:47
2025-04-03 00:42:47,957 - INFO - ID: 3, Name: Maria Martin, Email: antonioglenn@example.com, Created: 2025-04-02 20:42:47
2025-04-03 00:42:47,957 - INFO - Starting SQL-based user registration test
2025-04-03 00:42:47,957 - INFO - Retrieved test user data: Kara Anderson (sjackson@example.org)
2025-04-03 00:42:49,106 - INFO - Navigated to Add User page
2025-04-03 00:42:49,346 - INFO - Filled in user registration form with SQL data
2025-04-03 00:42:49,379 - INFO - Submitted user registration form
2025-04-03 00:43:02,573 - INFO - API Response Status Code: 400
2025-04-03 00:43:02,573 - INFO - API Response Body: {"message":"Email address is already in use"}
2025-04-03 00:43:02,573 - INFO - User might already exist, continuing with test
2025-04-03 00:43:02,573 - INFO - SQL-based user registration test completed successfully
2025-04-03 00:43:02,574 - INFO - Database file cleaned up
2025-04-03 00:43:02,654 - INFO - Test cleanup completed
2025-04-03 00:46:26,013 - INFO - Starting empty fields validation test
2025-04-03 00:46:27,620 - INFO - Empty fields validation test completed successfully
2025-04-03 00:46:27,800 - INFO - Starting empty fields API validation test
2025-04-03 00:46:28,427 - INFO - Response status code: 400
2025-04-03 00:46:28,428 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:46:28,428 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:46:28,439 - INFO - Starting SQL operations test
2025-04-03 00:46:28,439 - INFO - Executing SELECT query
2025-04-03 00:46:28,439 - INFO - Found 3 users in the database
2025-04-03 00:46:28,439 - INFO - Executing SELECT with WHERE clause
2025-04-03 00:46:28,440 - INFO - Found user: (1, 'John', 'Doe', 'john.doe@example.com', '2025-04-02 20:46:28')
2025-04-03 00:46:28,440 - INFO - Executing INSERT operation
2025-04-03 00:46:28,440 - INFO - Executing UPDATE operation
2025-04-03 00:46:28,441 - INFO - Executing DELETE operation
2025-04-03 00:46:28,441 - INFO - Creating and querying related tables
2025-04-03 00:46:28,442 - INFO - Executing JOIN query
2025-04-03 00:46:28,442 - INFO - Found 3 user profiles
2025-04-03 00:46:28,442 - INFO - Executing aggregate functions
2025-04-03 00:46:28,443 - INFO - Total number of users: 3
2025-04-03 00:46:28,443 - INFO - Executing GROUP BY query
2025-04-03 00:46:28,443 - INFO - Location statistics: [('San Francisco', 1)]
2025-04-03 00:46:28,443 - INFO - Final user count: 3
2025-04-03 00:46:28,443 - INFO - SQL operations test completed successfully
2025-04-03 00:46:28,878 - INFO - Test setup completed
2025-04-03 00:46:28,881 - INFO - Starting empty fields validation test
2025-04-03 00:46:30,053 - INFO - Navigated to Add User page
2025-04-03 00:46:30,096 - INFO - Submitted empty form
2025-04-03 00:46:32,125 - INFO - Empty fields validation test completed successfully
2025-04-03 00:46:32,199 - INFO - Test cleanup completed
2025-04-03 00:49:36,871 - INFO - Starting empty fields validation test
2025-04-03 00:49:38,449 - INFO - Empty fields validation test completed successfully
2025-04-03 00:49:38,597 - INFO - Starting empty fields API validation test
2025-04-03 00:49:39,225 - INFO - Response status code: 400
2025-04-03 00:49:39,226 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 00:49:39,227 - INFO - Empty fields API validation test completed successfully
2025-04-03 00:49:39,243 - INFO - Starting SQL operations test
2025-04-03 00:49:39,243 - INFO - Executing SELECT query
2025-04-03 00:49:39,243 - INFO - Found 3 users in the database
2025-04-03 00:49:39,243 - INFO - Executing SELECT with WHERE clause
2025-04-03 00:49:39,243 - INFO - Found user: (1, 'John', 'Doe', 'john.doe@example.com', '2025-04-02 20:49:39')
2025-04-03 00:49:39,244 - INFO - Executing INSERT operation
2025-04-03 00:49:39,244 - INFO - Executing UPDATE operation
2025-04-03 00:49:39,245 - INFO - Executing DELETE operation
2025-04-03 00:49:39,245 - INFO - Creating and querying related tables
2025-04-03 00:49:39,246 - INFO - Executing JOIN query
2025-04-03 00:49:39,247 - INFO - Found 3 user profiles
2025-04-03 00:49:39,247 - INFO - Executing aggregate functions
2025-04-03 00:49:39,247 - INFO - Total number of users: 3
2025-04-03 00:49:39,247 - INFO - Executing GROUP BY query
2025-04-03 00:49:39,247 - INFO - Location statistics: [('San Francisco', 1)]
2025-04-03 00:49:39,247 - INFO - Final user count: 3
2025-04-03 00:49:39,248 - INFO - SQL operations test completed successfully
2025-04-03 00:49:39,688 - INFO - Test setup completed
2025-04-03 00:49:39,690 - INFO - Starting empty fields validation test
2025-04-03 00:49:40,827 - INFO - Navigated to Add User page
2025-04-03 00:49:40,867 - INFO - Submitted empty form
2025-04-03 00:49:42,904 - INFO - Empty fields validation test completed successfully
2025-04-03 00:49:42,977 - INFO - Test cleanup completed
2025-04-03 00:59:12,339 - INFO - Test setup completed
2025-04-03 00:59:12,350 - INFO - Verifying SQL table creation and data...
2025-04-03 00:59:12,350 - INFO - Table structure:
2025-04-03 00:59:12,350 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 00:59:12,350 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:59:12,350 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:59:12,350 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:59:12,350 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 00:59:12,350 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 00:59:12,351 - INFO - Number of rows in table: 5
2025-04-03 00:59:12,351 - INFO - Sample data:
2025-04-03 00:59:12,351 - INFO - ID: 1, Name: Jessica Brown, Email: sheaedward@example.com, Created: 2025-04-02 20:59:12
2025-04-03 00:59:12,351 - INFO - ID: 2, Name: Sara Lowe, Email: atkinsondanielle@example.net, Created: 2025-04-02 20:59:12
2025-04-03 00:59:12,351 - INFO - ID: 3, Name: Robert Young, Email: kimdavid@example.com, Created: 2025-04-02 20:59:12
2025-04-03 00:59:12,352 - INFO - Starting SQL-based user registration test
2025-04-03 00:59:12,352 - INFO - Retrieved test user data: Jessica Brown (sheaedward@example.com)
2025-04-03 00:59:13,082 - INFO - API Request Payload: {'firstName': 'Jessica', 'lastName': 'Brown', 'email': 'sheaedward@example.com', 'password': '(7WGSx!6C!'}
2025-04-03 00:59:13,082 - INFO - API Response Status Code: 201
2025-04-03 00:59:13,082 - INFO - Payload verification successful
2025-04-03 00:59:13,082 - INFO - Status code verification successful
2025-04-03 00:59:13,082 - INFO - SQL-based user registration test completed successfully
2025-04-03 00:59:13,083 - INFO - Database file cleaned up
2025-04-03 00:59:13,159 - INFO - Test cleanup completed
2025-04-03 01:00:55,120 - INFO - Starting empty fields validation test
2025-04-03 01:00:56,708 - INFO - Empty fields validation test completed successfully
2025-04-03 01:00:56,843 - INFO - Starting empty fields API validation test
2025-04-03 01:00:57,479 - INFO - Response status code: 400
2025-04-03 01:00:57,480 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:00:57,480 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:00:57,911 - INFO - Test setup completed
2025-04-03 01:00:57,917 - INFO - Verifying SQL table creation and data...
2025-04-03 01:00:57,917 - INFO - Table structure:
2025-04-03 01:00:57,917 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:00:57,917 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:00:57,917 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:00:57,917 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:00:57,917 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:00:57,917 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:00:57,917 - INFO - Number of rows in table: 5
2025-04-03 01:00:57,917 - INFO - Sample data:
2025-04-03 01:00:57,917 - INFO - ID: 1, Name: Jesse Miller, Email: kempclaudia@example.com, Created: 2025-04-02 21:00:57
2025-04-03 01:00:57,917 - INFO - ID: 2, Name: Ernest Weeks, Email: burtoncaitlin@example.org, Created: 2025-04-02 21:00:57
2025-04-03 01:00:57,917 - INFO - ID: 3, Name: William Bartlett, Email: lmorgan@example.org, Created: 2025-04-02 21:00:57
2025-04-03 01:00:57,918 - INFO - Starting SQL-based user registration test
2025-04-03 01:00:57,918 - INFO - Retrieved test user data: Jesse Miller (kempclaudia@example.com)
2025-04-03 01:00:58,566 - INFO - API Request Payload: {'firstName': 'Jesse', 'lastName': 'Miller', 'email': 'kempclaudia@example.com', 'password': '$dMgUv3!U0'}
2025-04-03 01:00:58,567 - INFO - API Response Status Code: 201
2025-04-03 01:00:58,567 - INFO - Payload verification successful
2025-04-03 01:00:58,567 - INFO - Status code verification successful
2025-04-03 01:00:58,567 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:00:58,569 - INFO - Database file cleaned up
2025-04-03 01:00:58,643 - INFO - Test cleanup completed
2025-04-03 01:05:29,594 - INFO - Starting empty fields validation test
2025-04-03 01:05:31,185 - INFO - Empty fields validation test completed successfully
2025-04-03 01:05:31,320 - INFO - Starting empty fields API validation test
2025-04-03 01:05:31,957 - INFO - Response status code: 400
2025-04-03 01:05:31,957 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:05:31,958 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:05:32,387 - INFO - Test setup completed
2025-04-03 01:05:32,395 - INFO - Verifying SQL table creation and data...
2025-04-03 01:05:32,395 - INFO - Table structure:
2025-04-03 01:05:32,395 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:05:32,395 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:05:32,395 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:05:32,395 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:05:32,395 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:05:32,396 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:05:32,396 - INFO - Number of rows in table: 5
2025-04-03 01:05:32,396 - INFO - Sample data:
2025-04-03 01:05:32,396 - INFO - ID: 1, Name: Carlos Patton, Email: davidwilliams@example.org, Created: 2025-04-02 21:05:32
2025-04-03 01:05:32,396 - INFO - ID: 2, Name: Lauren Williams, Email: johnsonthomas@example.net, Created: 2025-04-02 21:05:32
2025-04-03 01:05:32,396 - INFO - ID: 3, Name: Tanya Johnson, Email: wellsandrea@example.org, Created: 2025-04-02 21:05:32
2025-04-03 01:05:32,397 - INFO - Starting SQL-based user registration test
2025-04-03 01:05:32,397 - INFO - Retrieved test user data: Carlos Patton (davidwilliams@example.org)
2025-04-03 01:05:33,059 - INFO - API Request Payload: {'firstName': 'Carlos', 'lastName': 'Patton', 'email': 'davidwilliams@example.org', 'password': 'Bh1OpKXo^4'}
2025-04-03 01:05:33,059 - INFO - API Response Status Code: 201
2025-04-03 01:05:33,059 - INFO - Payload verification successful
2025-04-03 01:05:33,059 - INFO - Status code verification successful
2025-04-03 01:05:33,059 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:05:33,061 - INFO - Database file cleaned up
2025-04-03 01:05:33,135 - INFO - Test cleanup completed
2025-04-03 01:11:05,422 - INFO - Test setup completed
2025-04-03 01:11:05,428 - INFO - Verifying SQL table creation and data...
2025-04-03 01:11:05,428 - INFO - Table structure:
2025-04-03 01:11:05,428 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:11:05,428 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:05,428 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:05,429 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:05,429 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:05,429 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:11:05,429 - INFO - Number of rows in table: 5
2025-04-03 01:11:05,429 - INFO - Sample data:
2025-04-03 01:11:05,429 - INFO - ID: 1, Name: Jennifer Moran, Email: castropatricia@example.org, Created: 2025-04-02 21:11:05
2025-04-03 01:11:05,429 - INFO - ID: 2, Name: Timothy Ball, Email: jillcunningham@example.net, Created: 2025-04-02 21:11:05
2025-04-03 01:11:05,429 - INFO - ID: 3, Name: Christy King, Email: cindy81@example.net, Created: 2025-04-02 21:11:05
2025-04-03 01:11:05,429 - INFO - Starting SQL-based user registration test
2025-04-03 01:11:05,429 - INFO - Retrieved test user data: Jennifer Moran (castropatricia@example.org)
2025-04-03 01:11:06,157 - INFO - API Request Payload: {'firstName': 'Jennifer', 'lastName': 'Moran', 'email': 'castropatricia@example.org', 'password': 'cr0_hqC1F!'}
2025-04-03 01:11:06,157 - INFO - API Response Status Code: 201
2025-04-03 01:11:06,157 - INFO - Payload verification successful
2025-04-03 01:11:06,157 - INFO - Status code verification successful
2025-04-03 01:11:06,157 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:11:06,161 - INFO - Database file cleaned up
2025-04-03 01:11:06,232 - INFO - Test cleanup completed
2025-04-03 01:11:25,676 - INFO - Starting empty fields validation test
2025-04-03 01:11:27,288 - INFO - Empty fields validation test completed successfully
2025-04-03 01:11:27,421 - INFO - Starting empty fields API validation test
2025-04-03 01:11:28,045 - INFO - Response status code: 400
2025-04-03 01:11:28,046 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:11:28,047 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:11:28,599 - INFO - Test setup completed
2025-04-03 01:11:28,601 - INFO - Verifying SQL table creation and data...
2025-04-03 01:11:28,601 - INFO - Table structure:
2025-04-03 01:11:28,601 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:11:28,601 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:28,601 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:28,601 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:28,601 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:11:28,601 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:11:28,601 - INFO - Number of rows in table: 5
2025-04-03 01:11:28,601 - INFO - Sample data:
2025-04-03 01:11:28,601 - INFO - ID: 1, Name: Karen Ward, Email: zhanson@example.org, Created: 2025-04-02 21:11:28
2025-04-03 01:11:28,601 - INFO - ID: 2, Name: Natalie Reed, Email: brandon89@example.com, Created: 2025-04-02 21:11:28
2025-04-03 01:11:28,601 - INFO - ID: 3, Name: Wesley Robbins, Email: wharrison@example.org, Created: 2025-04-02 21:11:28
2025-04-03 01:11:28,602 - INFO - Starting SQL-based user registration test
2025-04-03 01:11:28,602 - INFO - Retrieved test user data: Karen Ward (zhanson@example.org)
2025-04-03 01:11:29,258 - INFO - API Request Payload: {'firstName': 'Karen', 'lastName': 'Ward', 'email': 'zhanson@example.org', 'password': '(7Esum5bz6'}
2025-04-03 01:11:29,258 - INFO - API Response Status Code: 201
2025-04-03 01:11:29,258 - INFO - Payload verification successful
2025-04-03 01:11:29,258 - INFO - Status code verification successful
2025-04-03 01:11:29,258 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:11:29,260 - INFO - Database file cleaned up
2025-04-03 01:11:29,330 - INFO - Test cleanup completed
2025-04-03 01:13:17,628 - INFO - Test setup completed
2025-04-03 01:13:17,633 - INFO - Verifying SQL table creation and data...
2025-04-03 01:13:17,633 - INFO - Table structure:
2025-04-03 01:13:17,633 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:13:17,633 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:13:17,633 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:13:17,633 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:13:17,633 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:13:17,633 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:13:17,633 - INFO - Number of rows in table: 5
2025-04-03 01:13:17,634 - INFO - Sample data:
2025-04-03 01:13:17,634 - INFO - ID: 1, Name: Rebecca Bruce, Email: danielcabrera@example.com, Created: 2025-04-02 21:13:17
2025-04-03 01:13:17,634 - INFO - ID: 2, Name: William Hooper, Email: rachelbates@example.com, Created: 2025-04-02 21:13:17
2025-04-03 01:13:17,634 - INFO - ID: 3, Name: Morgan Dunn, Email: awaller@example.org, Created: 2025-04-02 21:13:17
2025-04-03 01:13:17,634 - INFO - Starting SQL-based user registration test
2025-04-03 01:13:19,640 - INFO - Retrieved test user data: Rebecca Bruce (danielcabrera@example.com)
2025-04-03 01:13:21,650 - INFO - Navigated to Add User page
2025-04-03 01:13:26,946 - INFO - Filled in user registration form with SQL data
2025-04-03 01:13:28,988 - INFO - Submitted user registration form
2025-04-03 01:13:53,212 - INFO - API Response Status Code: 400
2025-04-03 01:13:55,220 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:13:55,339 - INFO - Test cleanup completed
2025-04-03 01:16:13,341 - INFO - Starting empty fields validation test
2025-04-03 01:16:14,939 - INFO - Empty fields validation test completed successfully
2025-04-03 01:16:15,150 - INFO - Starting empty fields API validation test
2025-04-03 01:16:15,778 - INFO - Response status code: 400
2025-04-03 01:16:15,779 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:16:15,779 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:16:16,384 - INFO - Test setup completed
2025-04-03 01:16:16,391 - INFO - Verifying SQL table creation and data...
2025-04-03 01:16:16,391 - INFO - Table structure:
2025-04-03 01:16:16,391 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:16:16,391 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:16:16,391 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:16:16,391 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:16:16,391 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:16:16,391 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:16:16,391 - INFO - Number of rows in table: 10
2025-04-03 01:16:16,392 - INFO - Sample data:
2025-04-03 01:16:16,392 - INFO - ID: 1, Name: Rebecca Bruce, Email: danielcabrera@example.com, Created: 2025-04-02 21:13:17
2025-04-03 01:16:16,392 - INFO - ID: 2, Name: William Hooper, Email: rachelbates@example.com, Created: 2025-04-02 21:13:17
2025-04-03 01:16:16,392 - INFO - ID: 3, Name: Morgan Dunn, Email: awaller@example.org, Created: 2025-04-02 21:13:17
2025-04-03 01:16:16,393 - INFO - Starting SQL-based user registration test
2025-04-03 01:16:18,398 - INFO - Retrieved test user data: Rebecca Bruce (danielcabrera@example.com)
2025-04-03 01:16:20,337 - INFO - Navigated to Add User page
2025-04-03 01:16:25,670 - INFO - Filled in user registration form with SQL data
2025-04-03 01:16:27,713 - INFO - Submitted user registration form
2025-04-03 01:16:30,747 - INFO - Registration error: Email address is already in use
2025-04-03 01:16:32,753 - INFO - Preparing API request with data:
2025-04-03 01:16:32,753 - INFO - First Name: Rebecca
2025-04-03 01:16:32,753 - INFO - Last Name: Bruce
2025-04-03 01:16:32,753 - INFO - Email: danielcabrera@example.com
2025-04-03 01:16:32,753 - INFO - Password: **********
2025-04-03 01:16:33,410 - INFO - API Response Status Code: 400
2025-04-03 01:16:33,410 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:16:35,414 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:16:35,529 - INFO - Test cleanup completed
2025-04-03 01:17:29,342 - INFO - Starting empty fields validation test
2025-04-03 01:17:31,086 - INFO - Empty fields validation test completed successfully
2025-04-03 01:17:31,275 - INFO - Starting empty fields API validation test
2025-04-03 01:17:31,912 - INFO - Response status code: 400
2025-04-03 01:17:31,912 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:17:31,913 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:17:32,502 - INFO - Test setup completed
2025-04-03 01:17:32,504 - INFO - Verifying SQL table creation and data...
2025-04-03 01:17:32,504 - INFO - Table structure:
2025-04-03 01:17:32,504 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:17:32,504 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:17:32,504 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:17:32,504 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:17:32,504 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:17:32,504 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:17:32,504 - INFO - Number of rows in table: 15
2025-04-03 01:17:32,504 - INFO - Sample data:
2025-04-03 01:17:32,504 - INFO - ID: 1, Name: Rebecca Bruce, Email: danielcabrera@example.com, Created: 2025-04-02 21:13:17
2025-04-03 01:17:32,504 - INFO - ID: 2, Name: William Hooper, Email: rachelbates@example.com, Created: 2025-04-02 21:13:17
2025-04-03 01:17:32,504 - INFO - ID: 3, Name: Morgan Dunn, Email: awaller@example.org, Created: 2025-04-02 21:13:17
2025-04-03 01:17:32,505 - INFO - Starting SQL-based user registration test
2025-04-03 01:17:32,505 - INFO - Retrieved test user data: Rebecca Bruce (danielcabrera@example.com)
2025-04-03 01:17:33,148 - INFO - API Request Payload: {'firstName': 'Rebecca', 'lastName': 'Bruce', 'email': 'danielcabrera@example.com', 'password': 'b+ToM8TrHp'}
2025-04-03 01:17:33,149 - INFO - API Response Status Code: 400
2025-04-03 01:17:33,149 - INFO - Payload verification successful
2025-04-03 01:17:33,149 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:17:33,180 - INFO - Database file cleaned up
2025-04-03 01:17:33,252 - INFO - Test cleanup completed
2025-04-03 01:18:19,124 - INFO - Starting empty fields validation test
2025-04-03 01:18:20,729 - INFO - Empty fields validation test completed successfully
2025-04-03 01:18:20,864 - INFO - Starting empty fields API validation test
2025-04-03 01:18:21,481 - INFO - Response status code: 400
2025-04-03 01:18:21,481 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:18:21,482 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:18:22,121 - INFO - Test setup completed
2025-04-03 01:18:22,126 - INFO - Verifying SQL table creation and data...
2025-04-03 01:18:22,126 - INFO - Table structure:
2025-04-03 01:18:22,126 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:18:22,126 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:22,126 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:22,126 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:22,126 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:22,126 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:18:22,126 - INFO - Number of rows in table: 5
2025-04-03 01:18:22,126 - INFO - Sample data:
2025-04-03 01:18:22,126 - INFO - ID: 1, Name: Jeffrey Stone, Email: michael34@example.org, Created: 2025-04-02 21:18:22
2025-04-03 01:18:22,126 - INFO - ID: 2, Name: Jacob Padilla, Email: gbrown@example.net, Created: 2025-04-02 21:18:22
2025-04-03 01:18:22,126 - INFO - ID: 3, Name: Brandi Whitaker, Email: joseph14@example.org, Created: 2025-04-02 21:18:22
2025-04-03 01:18:22,126 - INFO - Starting SQL-based user registration test
2025-04-03 01:18:22,126 - INFO - Retrieved test user data: Jeffrey Stone (michael34@example.org)
2025-04-03 01:18:22,777 - INFO - API Request Payload: {'firstName': 'Jeffrey', 'lastName': 'Stone', 'email': 'michael34@example.org', 'password': 'Q1gUfvLa*R'}
2025-04-03 01:18:22,777 - INFO - API Response Status Code: 201
2025-04-03 01:18:22,777 - INFO - Payload verification successful
2025-04-03 01:18:22,777 - INFO - Status code verification successful
2025-04-03 01:18:22,777 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:18:22,779 - INFO - Database file cleaned up
2025-04-03 01:18:22,850 - INFO - Test cleanup completed
2025-04-03 01:18:45,283 - INFO - Starting empty fields validation test
2025-04-03 01:18:46,974 - INFO - Empty fields validation test completed successfully
2025-04-03 01:18:47,112 - INFO - Starting empty fields API validation test
2025-04-03 01:18:47,740 - INFO - Response status code: 400
2025-04-03 01:18:47,741 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:18:47,741 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:18:48,359 - INFO - Test setup completed
2025-04-03 01:18:48,364 - INFO - Verifying SQL table creation and data...
2025-04-03 01:18:48,364 - INFO - Table structure:
2025-04-03 01:18:48,364 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:18:48,364 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:48,364 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:48,364 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:48,364 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:18:48,364 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:18:48,364 - INFO - Number of rows in table: 5
2025-04-03 01:18:48,364 - INFO - Sample data:
2025-04-03 01:18:48,364 - INFO - ID: 1, Name: Terri Harrison, Email: donnagreen@example.org, Created: 2025-04-02 21:18:48
2025-04-03 01:18:48,364 - INFO - ID: 2, Name: Jason Fernandez, Email: william95@example.net, Created: 2025-04-02 21:18:48
2025-04-03 01:18:48,364 - INFO - ID: 3, Name: Thomas Anderson, Email: wpaul@example.org, Created: 2025-04-02 21:18:48
2025-04-03 01:18:48,365 - INFO - Starting SQL-based user registration test
2025-04-03 01:18:48,365 - INFO - Retrieved test user data: Terri Harrison (donnagreen@example.org)
2025-04-03 01:18:49,010 - INFO - API Request Payload: {'firstName': 'Terri', 'lastName': 'Harrison', 'email': 'donnagreen@example.org', 'password': '!0C3Wm)!17'}
2025-04-03 01:18:49,011 - INFO - API Response Status Code: 201
2025-04-03 01:18:49,011 - INFO - Payload verification successful
2025-04-03 01:18:49,011 - ERROR - API verification failed: Expected status code 201, got 201
assert 201 == 20
 +  where 201 = <Response [201]>.status_code
2025-04-03 01:18:49,036 - INFO - Database file cleaned up
2025-04-03 01:18:49,103 - INFO - Test cleanup completed
2025-04-03 01:19:20,678 - INFO - Starting empty fields validation test
2025-04-03 01:19:22,281 - INFO - Empty fields validation test completed successfully
2025-04-03 01:19:22,467 - INFO - Starting empty fields API validation test
2025-04-03 01:19:23,084 - INFO - Response status code: 400
2025-04-03 01:19:23,085 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:19:23,086 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:19:23,726 - INFO - Test setup completed
2025-04-03 01:19:23,731 - INFO - Verifying SQL table creation and data...
2025-04-03 01:19:23,731 - INFO - Table structure:
2025-04-03 01:19:23,731 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:19:23,731 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:23,731 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:23,731 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:23,731 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:23,731 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:19:23,731 - INFO - Number of rows in table: 5
2025-04-03 01:19:23,731 - INFO - Sample data:
2025-04-03 01:19:23,731 - INFO - ID: 1, Name: Edgar Hicks, Email: hoffmanjoseph@example.com, Created: 2025-04-02 21:19:23
2025-04-03 01:19:23,732 - INFO - ID: 2, Name: Lisa Bryant, Email: wendypham@example.net, Created: 2025-04-02 21:19:23
2025-04-03 01:19:23,732 - INFO - ID: 3, Name: Ruben James, Email: znelson@example.org, Created: 2025-04-02 21:19:23
2025-04-03 01:19:23,732 - INFO - Starting SQL-based user registration test
2025-04-03 01:19:23,732 - INFO - Retrieved test user data: Edgar Hicks (hoffmanjoseph@example.com)
2025-04-03 01:19:24,406 - INFO - API Request Payload: {'firstName': 'Edgar', 'lastName': 'Hicks', 'email': 'hoffmanjoseph@example.com', 'password': 'Z1&^N*Jq_b'}
2025-04-03 01:19:24,406 - INFO - API Response Status Code: 201
2025-04-03 01:19:24,406 - INFO - Payload verification successful
2025-04-03 01:19:24,407 - INFO - Status code verification successful
2025-04-03 01:19:24,407 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:19:24,409 - INFO - Database file cleaned up
2025-04-03 01:19:24,477 - INFO - Test cleanup completed
2025-04-03 01:19:52,548 - INFO - Starting empty fields validation test
2025-04-03 01:19:54,250 - INFO - Empty fields validation test completed successfully
2025-04-03 01:19:54,391 - INFO - Starting empty fields API validation test
2025-04-03 01:19:55,017 - INFO - Response status code: 400
2025-04-03 01:19:55,019 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:19:55,019 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:19:55,666 - INFO - Test setup completed
2025-04-03 01:19:55,670 - INFO - Verifying SQL table creation and data...
2025-04-03 01:19:55,670 - INFO - Table structure:
2025-04-03 01:19:55,670 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:19:55,670 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:55,670 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:55,670 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:55,670 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:19:55,670 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:19:55,670 - INFO - Number of rows in table: 5
2025-04-03 01:19:55,670 - INFO - Sample data:
2025-04-03 01:19:55,670 - INFO - ID: 1, Name: Darren Rhodes, Email: smorris@example.org, Created: 2025-04-02 21:19:55
2025-04-03 01:19:55,670 - INFO - ID: 2, Name: Jonathan Mitchell, Email: ymartinez@example.org, Created: 2025-04-02 21:19:55
2025-04-03 01:19:55,670 - INFO - ID: 3, Name: Kathryn Elliott, Email: conleyscott@example.com, Created: 2025-04-02 21:19:55
2025-04-03 01:19:55,671 - INFO - Starting SQL-based user registration test
2025-04-03 01:19:55,671 - INFO - Retrieved test user data: Darren Rhodes (smorris@example.org)
2025-04-03 01:19:56,311 - INFO - API Request Payload: {'firstName': 'Darren', 'lastName': 'Rhodes', 'email': 'smorris@example.org', 'password': '#^8VvEVtxR'}
2025-04-03 01:19:56,311 - INFO - API Response Status Code: 400
2025-04-03 01:19:56,311 - INFO - Payload verification successful
2025-04-03 01:20:06,317 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:20:06,336 - INFO - Database file cleaned up
2025-04-03 01:20:06,404 - INFO - Test cleanup completed
2025-04-03 01:20:31,853 - INFO - Starting empty fields validation test
2025-04-03 01:20:33,407 - INFO - Empty fields validation test completed successfully
2025-04-03 01:20:33,536 - INFO - Starting empty fields API validation test
2025-04-03 01:20:34,173 - INFO - Response status code: 400
2025-04-03 01:20:34,174 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:20:34,174 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:20:34,790 - INFO - Test setup completed
2025-04-03 01:20:34,792 - INFO - Verifying SQL table creation and data...
2025-04-03 01:20:34,792 - INFO - Table structure:
2025-04-03 01:20:34,792 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:20:34,792 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:20:34,792 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:20:34,792 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:20:34,792 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:20:34,792 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:20:34,792 - INFO - Number of rows in table: 5
2025-04-03 01:20:34,792 - INFO - Sample data:
2025-04-03 01:20:34,792 - INFO - ID: 1, Name: Michelle Jenkins, Email: woodjames@example.net, Created: 2025-04-02 21:20:34
2025-04-03 01:20:34,792 - INFO - ID: 2, Name: Victor Reilly, Email: vlee@example.net, Created: 2025-04-02 21:20:34
2025-04-03 01:20:34,792 - INFO - ID: 3, Name: Linda Velazquez, Email: pattersonrichard@example.com, Created: 2025-04-02 21:20:34
2025-04-03 01:20:34,792 - INFO - Starting SQL-based user registration test
2025-04-03 01:20:34,792 - INFO - Retrieved test user data: Michelle Jenkins (woodjames@example.net)
2025-04-03 01:20:35,444 - INFO - API Request Payload: {'firstName': 'Michelle', 'lastName': 'Jenkins', 'email': 'woodjames@example.net', 'password': '&_9TZIDslI'}
2025-04-03 01:20:35,444 - INFO - API Response Status Code: 201
2025-04-03 01:20:35,444 - INFO - Payload verification successful
2025-04-03 01:20:40,450 - INFO - Status code verification successful
2025-04-03 01:20:40,450 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:20:40,456 - INFO - Database file cleaned up
2025-04-03 01:20:40,529 - INFO - Test cleanup completed
2025-04-03 01:21:02,555 - INFO - Starting empty fields validation test
2025-04-03 01:21:04,114 - INFO - Empty fields validation test completed successfully
2025-04-03 01:21:04,254 - INFO - Starting empty fields API validation test
2025-04-03 01:21:04,870 - INFO - Response status code: 400
2025-04-03 01:21:04,871 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:21:04,871 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:21:05,488 - INFO - Test setup completed
2025-04-03 01:21:05,491 - INFO - Verifying SQL table creation and data...
2025-04-03 01:21:05,491 - INFO - Table structure:
2025-04-03 01:21:05,491 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:21:05,491 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:21:05,491 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:21:05,491 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:21:05,491 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:21:05,491 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:21:05,491 - INFO - Number of rows in table: 5
2025-04-03 01:21:05,491 - INFO - Sample data:
2025-04-03 01:21:05,491 - INFO - ID: 1, Name: Andrew Randall, Email: joseph07@example.com, Created: 2025-04-02 21:21:05
2025-04-03 01:21:05,491 - INFO - ID: 2, Name: Sabrina Smith, Email: ryan52@example.net, Created: 2025-04-02 21:21:05
2025-04-03 01:21:05,491 - INFO - ID: 3, Name: Katelyn Davidson, Email: justin23@example.net, Created: 2025-04-02 21:21:05
2025-04-03 01:21:05,492 - INFO - Starting SQL-based user registration test
2025-04-03 01:21:05,492 - INFO - Retrieved test user data: Andrew Randall (joseph07@example.com)
2025-04-03 01:21:06,150 - INFO - API Request Payload: {'firstName': 'Andrew', 'lastName': 'Randall', 'email': 'joseph07@example.com', 'password': 'ug6*loFi5*'}
2025-04-03 01:21:06,150 - INFO - API Response Status Code: 201
2025-04-03 01:21:06,150 - INFO - Payload verification successful
2025-04-03 01:21:06,150 - INFO - Status code verification successful
2025-04-03 01:21:16,155 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:21:16,160 - INFO - Database file cleaned up
2025-04-03 01:21:16,232 - INFO - Test cleanup completed
2025-04-03 01:23:20,380 - INFO - Starting empty fields validation test
2025-04-03 01:23:22,014 - INFO - Empty fields validation test completed successfully
2025-04-03 01:23:22,163 - INFO - Starting empty fields API validation test
2025-04-03 01:23:22,813 - INFO - Response status code: 400
2025-04-03 01:23:22,813 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:23:22,814 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:23:23,446 - INFO - Test setup completed
2025-04-03 01:23:23,450 - INFO - Verifying SQL table creation and data...
2025-04-03 01:23:23,450 - INFO - Table structure:
2025-04-03 01:23:23,450 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:23:23,451 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:23:23,451 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:23:23,451 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:23:23,451 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:23:23,451 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:23:23,451 - INFO - Number of rows in table: 5
2025-04-03 01:23:23,451 - INFO - Sample data:
2025-04-03 01:23:23,451 - INFO - ID: 1, Name: Charles Flores, Email: icopeland@example.org, Created: 2025-04-02 21:23:23
2025-04-03 01:23:23,451 - INFO - ID: 2, Name: Justin Williams, Email: lestersean@example.org, Created: 2025-04-02 21:23:23
2025-04-03 01:23:23,451 - INFO - ID: 3, Name: Elijah Brooks, Email: whiterobert@example.org, Created: 2025-04-02 21:23:23
2025-04-03 01:23:23,451 - INFO - Starting SQL-based user registration test
2025-04-03 01:23:23,451 - INFO - Retrieved test user data: Charles Flores (icopeland@example.org)
2025-04-03 01:23:24,561 - INFO - Navigated to Add User page
2025-04-03 01:23:24,755 - INFO - Filled in user registration form with SQL data
2025-04-03 01:23:25,164 - INFO - Screenshot saved: screenshots/20250403_012324_registration_form_filled.png
2025-04-03 01:23:25,191 - INFO - Submitted user registration form
2025-04-03 01:23:27,258 - INFO - Screenshot saved: screenshots/20250403_012327_registration_form_submitted.png
2025-04-03 01:23:47,802 - INFO - API Request Payload: {'firstName': 'Charles', 'lastName': 'Flores', 'email': 'icopeland@example.org', 'password': '_6WEj_kwQB'}
2025-04-03 01:23:48,459 - INFO - API Response Status Code: 400
2025-04-03 01:23:48,460 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:23:48,460 - INFO - Payload verification successful
2025-04-03 01:23:48,533 - INFO - Screenshot saved: screenshots/20250403_012348_registration_failure.png
2025-04-03 01:23:48,533 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:23:48,603 - INFO - Database file cleaned up
2025-04-03 01:23:48,676 - INFO - Test cleanup completed
2025-04-03 01:26:41,066 - INFO - Starting empty fields validation test
2025-04-03 01:26:42,690 - INFO - Empty fields validation test completed successfully
2025-04-03 01:26:42,826 - INFO - Starting empty fields API validation test
2025-04-03 01:26:43,455 - INFO - Response status code: 400
2025-04-03 01:26:43,455 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:26:43,455 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:26:44,046 - INFO - Test setup completed
2025-04-03 01:26:44,049 - INFO - Verifying SQL table creation and data...
2025-04-03 01:26:44,050 - INFO - Table structure:
2025-04-03 01:26:44,050 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:26:44,050 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:26:44,050 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:26:44,050 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:26:44,050 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:26:44,050 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:26:44,050 - INFO - Number of rows in table: 5
2025-04-03 01:26:44,050 - INFO - Sample data:
2025-04-03 01:26:44,050 - INFO - ID: 1, Name: Laura Rice, Email: tbaker@example.com, Created: 2025-04-02 21:26:44
2025-04-03 01:26:44,050 - INFO - ID: 2, Name: Elizabeth Mitchell, Email: gonzalezdaniel@example.com, Created: 2025-04-02 21:26:44
2025-04-03 01:26:44,050 - INFO - ID: 3, Name: Erin Lewis, Email: jose52@example.com, Created: 2025-04-02 21:26:44
2025-04-03 01:26:44,050 - INFO - Starting SQL-based user registration test
2025-04-03 01:26:44,050 - INFO - Retrieved test user data: Laura Rice (tbaker@example.com)
2025-04-03 01:26:45,177 - INFO - Navigated to Add User page
2025-04-03 01:26:45,375 - INFO - Filled in user registration form with SQL data
2025-04-03 01:26:45,452 - INFO - Screenshot saved: screenshots/20250403_012645_registration_form_filled.png
2025-04-03 01:26:45,463 - INFO - Retrieved actual values from form:
2025-04-03 01:26:45,464 - INFO - First Name: Expected 'Laura', Got 'Laura'
2025-04-03 01:26:45,464 - INFO - Last Name: Expected 'Rice', Got 'Rice'
2025-04-03 01:26:45,464 - INFO - Email: Expected 'tbaker@example.com', Got 'tbaker@example.com'
2025-04-03 01:26:45,464 - INFO - Form values match database values
2025-04-03 01:26:45,493 - INFO - Submitted user registration form
2025-04-03 01:26:47,573 - INFO - Screenshot saved: screenshots/20250403_012647_registration_form_submitted.png
2025-04-03 01:27:08,123 - INFO - Sending API request with form values:
2025-04-03 01:27:08,123 - INFO - First Name: Laura
2025-04-03 01:27:08,123 - INFO - Last Name: Rice
2025-04-03 01:27:08,124 - INFO - Email: tbaker@example.com
2025-04-03 01:27:08,124 - INFO - Password: **********
2025-04-03 01:27:08,799 - INFO - API Response Status Code: 400
2025-04-03 01:27:08,800 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:27:08,888 - INFO - Screenshot saved: screenshots/20250403_012708_registration_failure.png
2025-04-03 01:27:08,888 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:27:08,908 - INFO - Database file cleaned up
2025-04-03 01:27:08,984 - INFO - Test cleanup completed
2025-04-03 01:29:07,479 - INFO - Starting empty fields validation test
2025-04-03 01:29:09,100 - INFO - Empty fields validation test completed successfully
2025-04-03 01:29:09,689 - INFO - Starting empty fields API validation test
2025-04-03 01:29:10,317 - INFO - Response status code: 400
2025-04-03 01:29:10,317 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:29:10,318 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:29:10,890 - INFO - Test setup completed
2025-04-03 01:29:10,891 - INFO - Cleared screenshots directory
2025-04-03 01:29:10,895 - INFO - Verifying SQL table creation and data...
2025-04-03 01:29:10,895 - INFO - Table structure:
2025-04-03 01:29:10,895 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:29:10,895 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:29:10,895 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:29:10,895 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:29:10,895 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:29:10,895 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:29:10,895 - INFO - Number of rows in table: 5
2025-04-03 01:29:10,895 - INFO - Sample data:
2025-04-03 01:29:10,895 - INFO - ID: 1, Name: Jennifer Jones, Email: fcalderon_20250403_012910_0@example.com, Created: 2025-04-02 21:29:10
2025-04-03 01:29:10,895 - INFO - ID: 2, Name: William Brown, Email: rodgersdorothy_20250403_012910_1@example.com, Created: 2025-04-02 21:29:10
2025-04-03 01:29:10,895 - INFO - ID: 3, Name: Lacey Gilbert, Email: karencooper_20250403_012910_2@example.com, Created: 2025-04-02 21:29:10
2025-04-03 01:29:10,895 - INFO - Starting SQL-based user registration test
2025-04-03 01:29:10,896 - INFO - Retrieved test user data: Jennifer Jones (fcalderon_20250403_012910_0@example.com)
2025-04-03 01:29:12,050 - INFO - Navigated to Add User page
2025-04-03 01:29:12,255 - INFO - Filled in user registration form with SQL data
2025-04-03 01:29:12,346 - INFO - Screenshot saved: screenshots/20250403_012912_registration_form_filled.png
2025-04-03 01:29:12,357 - INFO - Retrieved actual values from form:
2025-04-03 01:29:12,357 - INFO - First Name: Expected 'Jennifer', Got 'Jennifer'
2025-04-03 01:29:12,357 - INFO - Last Name: Expected 'Jones', Got 'Jones'
2025-04-03 01:29:12,357 - INFO - Email: Expected 'fcalderon_20250403_012910_0@example.com', Got 'fcalderon_20250403_012910_0@example.com'
2025-04-03 01:29:12,357 - INFO - Form values match database values
2025-04-03 01:29:12,384 - INFO - Submitted user registration form
2025-04-03 01:29:14,505 - INFO - Screenshot saved: screenshots/20250403_012914_registration_form_submitted.png
2025-04-03 01:29:35,032 - INFO - Sending API request with form values:
2025-04-03 01:29:35,032 - INFO - First Name: Jennifer
2025-04-03 01:29:35,033 - INFO - Last Name: Jones
2025-04-03 01:29:35,033 - INFO - Email: fcalderon_20250403_012910_0@example.com
2025-04-03 01:29:35,033 - INFO - Password: **********
2025-04-03 01:29:35,706 - INFO - API Response Status Code: 400
2025-04-03 01:29:35,706 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:29:35,804 - INFO - Screenshot saved: screenshots/20250403_012935_registration_failure.png
2025-04-03 01:29:35,805 - ERROR - API verification failed: Expected status code 201, got 400
assert 400 == 201
 +  where 400 = <Response [400]>.status_code
2025-04-03 01:29:35,824 - INFO - Database file cleaned up
2025-04-03 01:29:35,899 - INFO - Test cleanup completed
2025-04-03 01:33:50,928 - INFO - Starting empty fields validation test
2025-04-03 01:33:52,490 - INFO - Empty fields validation test completed successfully
2025-04-03 01:33:52,618 - INFO - Starting empty fields API validation test
2025-04-03 01:33:53,264 - INFO - Response status code: 400
2025-04-03 01:33:53,265 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:33:53,265 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:33:53,846 - INFO - Test setup completed
2025-04-03 01:33:53,850 - INFO - Cleared screenshots directory
2025-04-03 01:33:53,858 - INFO - Verifying SQL table creation and data...
2025-04-03 01:33:53,858 - INFO - Table structure:
2025-04-03 01:33:53,858 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:33:53,858 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:33:53,858 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:33:53,858 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:33:53,858 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:33:53,858 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:33:53,858 - INFO - Number of rows in table: 5
2025-04-03 01:33:53,858 - INFO - Sample data:
2025-04-03 01:33:53,858 - INFO - ID: 1, Name: Lauren Davis, Email: mariamitchell_20250403_013353_0@example.com, Created: 2025-04-02 21:33:53
2025-04-03 01:33:53,858 - INFO - ID: 2, Name: Mackenzie Warren, Email: kristichristian_20250403_013353_1@example.com, Created: 2025-04-02 21:33:53
2025-04-03 01:33:53,858 - INFO - ID: 3, Name: Sarah Miller, Email: udennis_20250403_013353_2@example.com, Created: 2025-04-02 21:33:53
2025-04-03 01:33:53,859 - INFO - Starting SQL-based user registration test
2025-04-03 01:33:53,859 - INFO - Retrieved test user data: Lauren Davis (mariamitchell_20250403_013353_0@example.com)
2025-04-03 01:33:55,018 - INFO - Navigated to Add User page
2025-04-03 01:33:55,209 - INFO - Filled in user registration form with SQL data
2025-04-03 01:33:55,292 - INFO - Screenshot saved: screenshots/20250403_013355_registration_form_filled.png
2025-04-03 01:33:55,305 - INFO - Retrieved actual values from form:
2025-04-03 01:33:55,305 - INFO - First Name: Expected 'Lauren', Got 'Lauren'
2025-04-03 01:33:55,305 - INFO - Last Name: Expected 'Davis', Got 'Davis'
2025-04-03 01:33:55,305 - INFO - Email: Expected 'mariamitchell_20250403_013353_0@example.com', Got 'mariamitchell_20250403_013353_0@example.com'
2025-04-03 01:33:55,305 - INFO - Form values match database values
2025-04-03 01:33:55,331 - INFO - Submitted user registration form
2025-04-03 01:33:57,448 - INFO - Screenshot saved: screenshots/20250403_013357_registration_form_submitted.png
2025-04-03 01:34:17,968 - INFO - Sending API request with form values:
2025-04-03 01:34:17,969 - INFO - First Name: Lauren
2025-04-03 01:34:17,969 - INFO - Last Name: Davis
2025-04-03 01:34:17,969 - INFO - Email: mariamitchell_20250403_013353_0@example.com
2025-04-03 01:34:17,969 - INFO - Password: **********
2025-04-03 01:34:18,613 - INFO - API Response Status Code: 400
2025-04-03 01:34:18,613 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:34:18,613 - INFO - API request correctly rejected duplicate email
2025-04-03 01:34:18,613 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:34:18,617 - INFO - Database file cleaned up
2025-04-03 01:34:18,700 - INFO - Test cleanup completed
2025-04-03 01:35:49,262 - INFO - Starting empty fields validation test
2025-04-03 01:35:50,879 - INFO - Empty fields validation test completed successfully
2025-04-03 01:35:51,030 - INFO - Starting empty fields API validation test
2025-04-03 01:35:51,663 - INFO - Response status code: 400
2025-04-03 01:35:51,663 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:35:51,664 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:35:52,313 - INFO - Test setup completed
2025-04-03 01:35:52,314 - INFO - Cleared screenshots directory
2025-04-03 01:35:52,318 - INFO - Verifying SQL table creation and data...
2025-04-03 01:35:52,319 - INFO - Table structure:
2025-04-03 01:35:52,319 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:35:52,319 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:35:52,319 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:35:52,319 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:35:52,319 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:35:52,319 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:35:52,319 - INFO - Number of rows in table: 5
2025-04-03 01:35:52,319 - INFO - Sample data:
2025-04-03 01:35:52,319 - INFO - ID: 1, Name: Jane Haynes, Email: arnoldmiranda_20250403_013552_0@example.com, Created: 2025-04-02 21:35:52
2025-04-03 01:35:52,319 - INFO - ID: 2, Name: Tyler Taylor, Email: aryan_20250403_013552_1@example.com, Created: 2025-04-02 21:35:52
2025-04-03 01:35:52,319 - INFO - ID: 3, Name: John Harvey, Email: rogersgina_20250403_013552_2@example.com, Created: 2025-04-02 21:35:52
2025-04-03 01:35:52,319 - INFO - Starting SQL-based user registration test
2025-04-03 01:35:52,319 - INFO - Retrieved test user data: Jane Haynes (arnoldmiranda_20250403_013552_0@example.com)
2025-04-03 01:35:53,433 - INFO - Navigated to Add User page
2025-04-03 01:35:53,638 - INFO - Filled in user registration form with SQL data
2025-04-03 01:35:53,699 - INFO - Screenshot saved: screenshots/20250403_013553_registration_form_filled.png
2025-04-03 01:35:53,710 - INFO - Retrieved actual values from form:
2025-04-03 01:35:53,710 - INFO - First Name: Expected 'Jane', Got 'Jane'
2025-04-03 01:35:53,710 - INFO - Last Name: Expected 'Haynes', Got 'Haynes'
2025-04-03 01:35:53,710 - INFO - Email: Expected 'arnoldmiranda_20250403_013552_0@example.com', Got 'arnoldmiranda_20250403_013552_0@example.com'
2025-04-03 01:35:53,710 - INFO - Form values match database values
2025-04-03 01:35:53,736 - INFO - Submitted user registration form
2025-04-03 01:35:55,815 - INFO - Screenshot saved: screenshots/20250403_013555_registration_form_submitted.png
2025-04-03 01:36:16,356 - INFO - Sending API request with form values:
2025-04-03 01:36:16,357 - INFO - First Name: Jane
2025-04-03 01:36:16,357 - INFO - Last Name: Haynes
2025-04-03 01:36:16,358 - INFO - Email: arnoldmiranda_20250403_013552_0@example.com
2025-04-03 01:36:16,358 - INFO - Password: **********
2025-04-03 01:36:17,116 - INFO - API Response Status Code: 400
2025-04-03 01:36:17,116 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:36:17,116 - INFO - API request correctly rejected duplicate email
2025-04-03 01:36:17,117 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:36:17,125 - INFO - Database file cleaned up
2025-04-03 01:36:17,209 - INFO - Test cleanup completed
2025-04-03 01:37:37,742 - INFO - Test setup completed
2025-04-03 01:37:37,743 - INFO - Cleared screenshots directory
2025-04-03 01:37:37,747 - INFO - Verifying SQL table creation and data...
2025-04-03 01:37:37,747 - INFO - Table structure:
2025-04-03 01:37:37,747 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:37:37,747 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:37:37,747 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:37:37,747 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:37:37,747 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:37:37,747 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:37:37,747 - INFO - Number of rows in table: 5
2025-04-03 01:37:37,747 - INFO - Sample data:
2025-04-03 01:37:37,747 - INFO - ID: 1, Name: Julie Brown, Email: leebrent_20250403_013737_0@example.com, Created: 2025-04-02 21:37:37
2025-04-03 01:37:37,747 - INFO - ID: 2, Name: Julia Smith, Email: luis05_20250403_013737_1@example.com, Created: 2025-04-02 21:37:37
2025-04-03 01:37:37,747 - INFO - ID: 3, Name: Jason Pearson, Email: davisdenise_20250403_013737_2@example.com, Created: 2025-04-02 21:37:37
2025-04-03 01:37:37,748 - INFO - Starting SQL-based user registration test
2025-04-03 01:37:37,748 - INFO - Retrieved test user data: Julie Brown (leebrent_20250403_013737_0@example.com)
2025-04-03 01:37:38,719 - INFO - Navigated to Add User page
2025-04-03 01:37:38,931 - INFO - Filled in user registration form with SQL data
2025-04-03 01:37:38,993 - INFO - Screenshot saved: screenshots/20250403_013738_registration_form_filled.png
2025-04-03 01:37:39,005 - INFO - Retrieved actual values from form:
2025-04-03 01:37:39,005 - INFO - First Name: Expected 'Julie', Got 'Julie'
2025-04-03 01:37:39,005 - INFO - Last Name: Expected 'Brown', Got 'Brown'
2025-04-03 01:37:39,005 - INFO - Email: Expected 'leebrent_20250403_013737_0@example.com', Got 'leebrent_20250403_013737_0@example.com'
2025-04-03 01:37:39,005 - INFO - Form values match database values
2025-04-03 01:37:39,038 - INFO - Submitted user registration form
2025-04-03 01:37:41,113 - INFO - Screenshot saved: screenshots/20250403_013741_registration_form_submitted.png
2025-04-03 01:38:01,655 - INFO - Sending API request with form values:
2025-04-03 01:38:01,655 - INFO - First Name: Julie
2025-04-03 01:38:01,655 - INFO - Last Name: Brown
2025-04-03 01:38:01,655 - INFO - Email: leebrent_20250403_013737_0@example.com
2025-04-03 01:38:01,655 - INFO - Password: **********
2025-04-03 01:38:02,330 - INFO - API Response Status Code: 400
2025-04-03 01:38:02,330 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:38:02,331 - INFO - API request correctly rejected duplicate email
2025-04-03 01:38:02,331 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:38:02,337 - INFO - Database file cleaned up
2025-04-03 01:38:02,415 - INFO - Test cleanup completed
2025-04-03 01:39:21,001 - INFO - Starting empty fields validation test
2025-04-03 01:39:22,587 - INFO - Empty fields validation test completed successfully
2025-04-03 01:39:22,764 - INFO - Starting empty fields API validation test
2025-04-03 01:39:23,383 - INFO - Response status code: 400
2025-04-03 01:39:23,383 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:39:23,383 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:39:23,968 - INFO - Test setup completed
2025-04-03 01:39:23,969 - INFO - Cleared screenshots directory
2025-04-03 01:39:23,973 - INFO - Verifying SQL table creation and data...
2025-04-03 01:39:23,973 - INFO - Table structure:
2025-04-03 01:39:23,973 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:39:23,974 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:39:23,974 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:39:23,974 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:39:23,974 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:39:23,974 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:39:23,974 - INFO - Number of rows in table: 5
2025-04-03 01:39:23,974 - INFO - Sample data:
2025-04-03 01:39:23,975 - INFO - ID: 1, Name: Robert Gregory, Email: xmills_20250403_013923_0@example.com, Created: 2025-04-02 21:39:23
2025-04-03 01:39:23,975 - INFO - ID: 2, Name: Rebecca Hamilton, Email: victornichols_20250403_013923_1@example.com, Created: 2025-04-02 21:39:23
2025-04-03 01:39:23,975 - INFO - ID: 3, Name: Phyllis Cross, Email: millerjoseph_20250403_013923_2@example.com, Created: 2025-04-02 21:39:23
2025-04-03 01:39:23,975 - INFO - Starting SQL-based user registration test
2025-04-03 01:39:23,975 - INFO - Retrieved test user data: Robert Gregory (xmills_20250403_013923_0@example.com)
2025-04-03 01:39:25,135 - INFO - Navigated to Add User page
2025-04-03 01:39:25,366 - INFO - Filled in user registration form with SQL data
2025-04-03 01:39:25,417 - INFO - Screenshot saved: screenshots/20250403_013925_registration_form_filled.png
2025-04-03 01:39:25,429 - INFO - Retrieved actual values from form:
2025-04-03 01:39:25,429 - INFO - First Name: Expected 'Robert', Got 'Robert'
2025-04-03 01:39:25,429 - INFO - Last Name: Expected 'Gregory', Got 'Gregory'
2025-04-03 01:39:25,429 - INFO - Email: Expected 'xmills_20250403_013923_0@example.com', Got 'xmills_20250403_013923_0@example.com'
2025-04-03 01:39:25,429 - INFO - Form values match database values
2025-04-03 01:39:25,455 - INFO - Submitted user registration form
2025-04-03 01:39:27,534 - INFO - Screenshot saved: screenshots/20250403_013927_registration_form_submitted.png
2025-04-03 01:39:48,057 - INFO - Sending API request with form values:
2025-04-03 01:39:48,058 - INFO - First Name: Robert
2025-04-03 01:39:48,058 - INFO - Last Name: Gregory
2025-04-03 01:39:48,059 - INFO - Email: xmills_20250403_013923_0@example.com
2025-04-03 01:39:48,059 - INFO - Password: **********
2025-04-03 01:39:48,720 - INFO - API Response Status Code: 400
2025-04-03 01:39:48,721 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:39:48,722 - INFO - API request correctly rejected duplicate email
2025-04-03 01:39:48,722 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:39:48,729 - INFO - Database file cleaned up
2025-04-03 01:39:48,813 - INFO - Test cleanup completed
2025-04-03 01:42:07,997 - INFO - Starting empty fields validation test
2025-04-03 01:42:09,560 - INFO - Empty fields validation test completed successfully
2025-04-03 01:42:09,700 - INFO - Starting empty fields API validation test
2025-04-03 01:42:10,329 - INFO - Response status code: 400
2025-04-03 01:42:10,329 - INFO - Response body: {'errors': {'firstName': {'name': 'ValidatorError', 'message': 'Path `firstName` is required.', 'properties': {'message': 'Path `firstName` is required.', 'type': 'required', 'path': 'firstName', 'value': ''}, 'kind': 'required', 'path': 'firstName', 'value': ''}, 'lastName': {'name': 'ValidatorError', 'message': 'Path `lastName` is required.', 'properties': {'message': 'Path `lastName` is required.', 'type': 'required', 'path': 'lastName', 'value': ''}, 'kind': 'required', 'path': 'lastName', 'value': ''}, 'email': {'name': 'ValidatorError', 'message': 'Email is invalid', 'properties': {'message': 'Email is invalid', 'type': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'kind': 'user defined', 'path': 'email', 'value': '', 'reason': {}}, 'password': {'name': 'ValidatorError', 'message': 'Path `password` is required.', 'properties': {'message': 'Path `password` is required.', 'type': 'required', 'path': 'password', 'value': ''}, 'kind': 'required', 'path': 'password', 'value': ''}}, '_message': 'User validation failed', 'message': 'User validation failed: firstName: Path `firstName` is required., lastName: Path `lastName` is required., email: Email is invalid, password: Path `password` is required.'}
2025-04-03 01:42:10,330 - INFO - Empty fields API validation test completed successfully
2025-04-03 01:42:10,913 - INFO - Test setup completed
2025-04-03 01:42:10,914 - INFO - Cleared screenshots directory
2025-04-03 01:42:10,920 - INFO - Verifying SQL table creation and data...
2025-04-03 01:42:10,920 - INFO - Table structure:
2025-04-03 01:42:10,920 - INFO - Column: id, Type: INTEGER, NotNull: 0, Default: None
2025-04-03 01:42:10,920 - INFO - Column: first_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:42:10,921 - INFO - Column: last_name, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:42:10,921 - INFO - Column: email, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:42:10,921 - INFO - Column: password, Type: TEXT, NotNull: 1, Default: None
2025-04-03 01:42:10,921 - INFO - Column: created_at, Type: TIMESTAMP, NotNull: 0, Default: CURRENT_TIMESTAMP
2025-04-03 01:42:10,921 - INFO - Number of rows in table: 5
2025-04-03 01:42:10,921 - INFO - Sample data:
2025-04-03 01:42:10,921 - INFO - ID: 1, Name: Cynthia Smith, Email: laurabaxter_20250403_014210_0@example.com, Created: 2025-04-02 21:42:10
2025-04-03 01:42:10,921 - INFO - ID: 2, Name: Katrina Sellers, Email: aarondavis_20250403_014210_1@example.com, Created: 2025-04-02 21:42:10
2025-04-03 01:42:10,921 - INFO - ID: 3, Name: Amy Lewis, Email: michaelasantiago_20250403_014210_2@example.com, Created: 2025-04-02 21:42:10
2025-04-03 01:42:10,921 - INFO - Starting SQL-based user registration test
2025-04-03 01:42:10,921 - INFO - Retrieved test user data: Cynthia Smith (laurabaxter_20250403_014210_0@example.com)
2025-04-03 01:42:12,050 - INFO - Navigated to Add User page
2025-04-03 01:42:12,295 - INFO - Filled in user registration form with SQL data
2025-04-03 01:42:12,348 - INFO - Screenshot saved: screenshots/20250403_014212_registration_form_filled.png
2025-04-03 01:42:12,360 - INFO - Retrieved actual values from form:
2025-04-03 01:42:12,360 - INFO - First Name: Expected 'Cynthia', Got 'Cynthia'
2025-04-03 01:42:12,360 - INFO - Last Name: Expected 'Smith', Got 'Smith'
2025-04-03 01:42:12,360 - INFO - Email: Expected 'laurabaxter_20250403_014210_0@example.com', Got 'laurabaxter_20250403_014210_0@example.com'
2025-04-03 01:42:12,360 - INFO - Form values match database values
2025-04-03 01:42:12,385 - INFO - Submitted user registration form
2025-04-03 01:42:14,473 - INFO - Screenshot saved: screenshots/20250403_014214_registration_form_submitted.png
2025-04-03 01:42:35,019 - INFO - Sending API request with form values:
2025-04-03 01:42:35,020 - INFO - First Name: Cynthia
2025-04-03 01:42:35,020 - INFO - Last Name: Smith
2025-04-03 01:42:35,021 - INFO - Email: laurabaxter_20250403_014210_0@example.com
2025-04-03 01:42:35,021 - INFO - Password: **********
2025-04-03 01:42:35,713 - INFO - API Response Status Code: 400
2025-04-03 01:42:35,713 - ERROR - API Response Body: {"message":"Email address is already in use"}
2025-04-03 01:42:35,713 - INFO - API request correctly rejected duplicate email
2025-04-03 01:42:35,713 - INFO - SQL-based user registration test completed successfully
2025-04-03 01:42:35,722 - INFO - Database file cleaned up
2025-04-03 01:42:35,808 - INFO - Test cleanup completed
